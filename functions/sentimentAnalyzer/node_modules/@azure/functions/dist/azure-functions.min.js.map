{"version":3,"file":"azure-functions.min.js","mappings":"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","sources":["webpack://@azure/functions/./src/setup.ts","webpack://@azure/functions/./src/ProgrammingModel.ts","webpack://@azure/functions/./src/converters/fromRpcTypedData.ts","webpack://@azure/functions/./src/errors.ts","webpack://@azure/functions/./src/output.ts","webpack://@azure/functions/./src/converters/toCamelCase.ts","webpack://@azure/functions/external commonjs2 \"http\"","webpack://@azure/functions/external commonjs2 \"net\"","webpack://@azure/functions/./src/converters/toRpcNullable.ts","webpack://@azure/functions/./src/converters/fromRpcContext.ts","webpack://@azure/functions/./src/app.ts","webpack://@azure/functions/./src/utils/Disposable.ts","webpack://@azure/functions/./src/http/httpProxy.ts","webpack://@azure/functions/./src/converters/toCoreFunctionMetadata.ts","webpack://@azure/functions/./src/trigger.ts","webpack://@azure/functions/./src/utils/tryGetCoreApiLazy.ts","webpack://@azure/functions/external commonjs2 \"undici\"","webpack://@azure/functions/./src/utils/getRandomHexString.ts","webpack://@azure/functions/./src/converters/toRpcTypedData.ts","webpack://@azure/functions/./src/hooks/AppTerminateContext.ts","webpack://@azure/functions/./src/converters/fromRpcTriggerMetadata.ts","webpack://@azure/functions/external commonjs2 \"events\"","webpack://@azure/functions/./src/input.ts","webpack://@azure/functions/./src/utils/workerSystemLog.ts","webpack://@azure/functions/./src/converters/toRpcHttp.ts","webpack://@azure/functions/external commonjs2 \"cookie\"","webpack://@azure/functions/./src/converters/fromRpcNullable.ts","webpack://@azure/functions/./src/utils/fallbackLogHandler.ts","webpack://@azure/functions/./src/hooks/LogHookContext.ts","webpack://@azure/functions/external commonjs2 \"crypto\"","webpack://@azure/functions/./src/converters/fromRpcBindings.ts","webpack://@azure/functions/./src/hooks/HookContext.ts","webpack://@azure/functions/external commonjs2 \"@azure/functions-extensions-base\"","webpack://@azure/functions/./src/InvocationModel.ts","webpack://@azure/functions/./src/addBindingName.ts","webpack://@azure/functions/./src/hooks/registerHook.ts","webpack://@azure/functions/./src/constants.ts","webpack://@azure/functions/./src/hooks/PostInvocationContext.ts","webpack://@azure/functions/./src/hooks/AppStartContext.ts","webpack://@azure/functions/./src/converters/toRpcHttpCookie.ts","webpack://@azure/functions/./src/http/HttpRequest.ts","webpack://@azure/functions/./src/index.ts","webpack://@azure/functions/./src/InvocationContext.ts","webpack://@azure/functions/external commonjs2 \"util\"","webpack://@azure/functions/./src/converters/toRpcDuration.ts","webpack://@azure/functions/./src/http/extractHttpUserFromHeaders.ts","webpack://@azure/functions/./src/hooks/PreInvocationContext.ts","webpack://@azure/functions/external commonjs2 \"@azure/functions-core\"","webpack://@azure/functions/./src/http/HttpResponse.ts","webpack://@azure/functions/./src/utils/nonNull.ts","webpack://@azure/functions/./src/hooks/InvocationHookContext.ts","webpack://@azure/functions/external commonjs2 \"url\"","webpack://@azure/functions/./src/utils/isTrigger.ts","webpack://@azure/functions/webpack/bootstrap","webpack://@azure/functions/webpack/startup"],"sourcesContent":["// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { SetupOptions } from '../types';\r\nimport { AzFuncSystemError } from './errors';\r\nimport { isDefined } from './utils/nonNull';\r\nimport { tryGetCoreApiLazy } from './utils/tryGetCoreApiLazy';\r\nimport { workerSystemLog } from './utils/workerSystemLog';\r\n\r\nlet setupLocked = false;\r\nexport function lockSetup(): void {\r\n    setupLocked = true;\r\n}\r\n\r\nexport let enableHttpStream = false;\r\nexport const capabilities: Record<string, string> = {};\r\n\r\nexport function setup(opts: SetupOptions): void {\r\n    if (setupLocked) {\r\n        throw new AzFuncSystemError(\"Setup options can't be changed after app startup has finished.\");\r\n    }\r\n\r\n    if (opts.enableHttpStream) {\r\n        // NOTE: coreApi.log was coincidentally added the same time as http streaming,\r\n        // so we can use that to validate the host version instead of messing with semver parsing\r\n        const coreApi = tryGetCoreApiLazy();\r\n        if (coreApi && !coreApi.log) {\r\n            throw new AzFuncSystemError(`HTTP streaming requires Azure Functions Host v4.28 or higher.`);\r\n        }\r\n    }\r\n\r\n    if (isDefined(opts.enableHttpStream)) {\r\n        enableHttpStream = opts.enableHttpStream;\r\n    }\r\n\r\n    if (opts.capabilities) {\r\n        for (let [key, val] of Object.entries(opts.capabilities)) {\r\n            if (isDefined(val)) {\r\n                val = String(val);\r\n                workerSystemLog('debug', `Capability ${key} set to ${val}.`);\r\n                capabilities[key] = val;\r\n            }\r\n        }\r\n    }\r\n\r\n    if (enableHttpStream) {\r\n        workerSystemLog('debug', `HTTP streaming enabled.`);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as coreTypes from '@azure/functions-core';\r\nimport { CoreInvocationContext, WorkerCapabilities } from '@azure/functions-core';\r\nimport { version } from './constants';\r\nimport { setupHttpProxy } from './http/httpProxy';\r\nimport { InvocationModel } from './InvocationModel';\r\nimport { capabilities as libraryCapabilities, enableHttpStream, lockSetup } from './setup';\r\n\r\nexport class ProgrammingModel implements coreTypes.ProgrammingModel {\r\n    name = '@azure/functions';\r\n    version = version;\r\n\r\n    getInvocationModel(coreCtx: CoreInvocationContext): InvocationModel {\r\n        return new InvocationModel(coreCtx);\r\n    }\r\n\r\n    async getCapabilities(workerCapabilities: WorkerCapabilities): Promise<WorkerCapabilities> {\r\n        lockSetup();\r\n\r\n        if (enableHttpStream) {\r\n            const httpUri = await setupHttpProxy();\r\n            workerCapabilities.HttpUri = httpUri;\r\n        }\r\n\r\n        Object.assign(workerCapabilities, libraryCapabilities);\r\n\r\n        return workerCapabilities;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { RpcTypedData } from '@azure/functions-core';\r\nimport { ResourceFactoryResolver } from '@azure/functions-extensions-base';\r\nimport { HttpRequest } from '../http/HttpRequest';\r\nimport { isDefined } from '../utils/nonNull';\r\n\r\nexport function fromRpcTypedData(data: RpcTypedData | null | undefined): unknown {\r\n    if (!data) {\r\n        return undefined;\r\n    } else if (isDefined(data.string)) {\r\n        return tryJsonParse(data.string);\r\n    } else if (isDefined(data.json)) {\r\n        return JSON.parse(data.json);\r\n    } else if (isDefined(data.bytes)) {\r\n        return Buffer.from(data.bytes);\r\n    } else if (isDefined(data.stream)) {\r\n        return Buffer.from(data.stream);\r\n    } else if (isDefined(data.http)) {\r\n        return new HttpRequest(data.http);\r\n    } else if (isDefined(data.int)) {\r\n        return data.int;\r\n    } else if (isDefined(data.double)) {\r\n        return data.double;\r\n    } else if (data.collectionBytes && isDefined(data.collectionBytes.bytes)) {\r\n        return data.collectionBytes.bytes.map((d) => Buffer.from(d));\r\n    } else if (data.collectionString && isDefined(data.collectionString.string)) {\r\n        return data.collectionString.string.map(tryJsonParse);\r\n    } else if (data.collectionDouble && isDefined(data.collectionDouble.double)) {\r\n        return data.collectionDouble.double;\r\n    } else if (data.collectionSint64 && isDefined(data.collectionSint64.sint64)) {\r\n        return data.collectionSint64.sint64;\r\n    } else if (data.modelBindingData && isDefined(data.modelBindingData.content)) {\r\n        try {\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\r\n            const resourceFactoryResolver: ResourceFactoryResolver = ResourceFactoryResolver.getInstance();\r\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\r\n            return resourceFactoryResolver.createClient(data.modelBindingData.source, data.modelBindingData);\r\n        } catch (exception) {\r\n            throw new Error(\r\n                'Unable to create client. Please register the extensions library with your function app. ' +\r\n                    `Error: ${exception instanceof Error ? exception.message : String(exception)}`\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nfunction tryJsonParse(data: string): unknown {\r\n    try {\r\n        return JSON.parse(data);\r\n    } catch {\r\n        return data;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport interface AzFuncError {\r\n    /**\r\n     * System errors can be tracked in our telemetry\r\n     * User errors cannot be tracked in our telemetry because they could have user information (users can still track it themselves in their app insights resource)\r\n     */\r\n    isAzureFunctionsSystemError: boolean;\r\n}\r\n\r\nexport interface ValidatedError extends Error, Partial<AzFuncError> {\r\n    /**\r\n     * Use `trySetErrorMessage` to set the error message\r\n     */\r\n    readonly message: string;\r\n}\r\n\r\nexport class AzFuncSystemError extends Error {\r\n    isAzureFunctionsSystemError = true;\r\n}\r\n\r\nexport class AzFuncTypeError extends TypeError implements AzFuncError {\r\n    isAzureFunctionsSystemError = true;\r\n}\r\n\r\nexport class AzFuncRangeError extends RangeError implements AzFuncError {\r\n    isAzureFunctionsSystemError = true;\r\n}\r\n\r\nexport class ReadOnlyError extends AzFuncTypeError {\r\n    constructor(propertyName: string) {\r\n        super(`Cannot assign to read only property '${propertyName}'`);\r\n    }\r\n}\r\n\r\nexport function ensureErrorType(err: unknown): ValidatedError {\r\n    if (err instanceof Error) {\r\n        return err;\r\n    } else {\r\n        let message: string;\r\n        if (err === undefined || err === null) {\r\n            message = 'Unknown error';\r\n        } else if (typeof err === 'string') {\r\n            message = err;\r\n        } else if (typeof err === 'object') {\r\n            message = JSON.stringify(err);\r\n        } else {\r\n            message = String(err);\r\n        }\r\n        return new Error(message);\r\n    }\r\n}\r\n\r\nexport function trySetErrorMessage(err: Error, message: string): void {\r\n    try {\r\n        err.message = message;\r\n    } catch {\r\n        // If we can't set the message, we'll keep the error as is\r\n    }\r\n}\r\n\r\n/**\r\n * This is mostly for callbacks where `null` or `undefined` indicates there is no error\r\n * By contrast, anything thrown/caught is assumed to be an error regardless of what it is\r\n */\r\nexport function isError(err: unknown): boolean {\r\n    return err !== null && err !== undefined;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {\r\n    CosmosDBOutput,\r\n    CosmosDBOutputOptions,\r\n    EventGridOutput,\r\n    EventGridOutputOptions,\r\n    EventHubOutput,\r\n    EventHubOutputOptions,\r\n    FunctionOutput,\r\n    GenericOutputOptions,\r\n    HttpOutput,\r\n    HttpOutputOptions,\r\n    MySqlOutput,\r\n    MySqlOutputOptions,\r\n    ServiceBusQueueOutput,\r\n    ServiceBusQueueOutputOptions,\r\n    ServiceBusTopicOutput,\r\n    ServiceBusTopicOutputOptions,\r\n    SqlOutput,\r\n    SqlOutputOptions,\r\n    StorageBlobOutput,\r\n    StorageBlobOutputOptions,\r\n    StorageQueueOutput,\r\n    StorageQueueOutputOptions,\r\n    TableOutput,\r\n    TableOutputOptions,\r\n    WebPubSubOutput,\r\n    WebPubSubOutputOptions,\r\n} from '@azure/functions';\r\nimport { addBindingName } from './addBindingName';\r\n\r\nexport function http(options: HttpOutputOptions): HttpOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'http',\r\n    });\r\n}\r\n\r\nexport function storageBlob(options: StorageBlobOutputOptions): StorageBlobOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'blob',\r\n    });\r\n}\r\n\r\nexport function table(options: TableOutputOptions): TableOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'table',\r\n    });\r\n}\r\n\r\nexport function storageQueue(options: StorageQueueOutputOptions): StorageQueueOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'queue',\r\n    });\r\n}\r\n\r\nexport function serviceBusQueue(options: ServiceBusQueueOutputOptions): ServiceBusQueueOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'serviceBus',\r\n    });\r\n}\r\n\r\nexport function serviceBusTopic(options: ServiceBusTopicOutputOptions): ServiceBusTopicOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'serviceBus',\r\n    });\r\n}\r\n\r\nexport function eventHub(options: EventHubOutputOptions): EventHubOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'eventHub',\r\n    });\r\n}\r\n\r\nexport function eventGrid(options: EventGridOutputOptions): EventGridOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'eventGrid',\r\n    });\r\n}\r\n\r\nexport function cosmosDB(options: CosmosDBOutputOptions): CosmosDBOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'cosmosDB',\r\n    });\r\n}\r\n\r\nexport function sql(options: SqlOutputOptions): SqlOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'sql',\r\n    });\r\n}\r\n\r\nexport function mySql(options: MySqlOutputOptions): MySqlOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'mysql',\r\n    });\r\n}\r\n\r\nexport function webPubSub(options: WebPubSubOutputOptions): WebPubSubOutput {\r\n    return addOutputBindingName({\r\n        ...options,\r\n        type: 'webPubSub',\r\n    });\r\n}\r\n\r\nexport function generic(options: GenericOutputOptions): FunctionOutput {\r\n    return addOutputBindingName(options);\r\n}\r\n\r\nfunction addOutputBindingName<T extends { type: string; name?: string }>(binding: T): T & { name: string } {\r\n    return addBindingName(binding, 'Output');\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport function toCamelCaseValue(data: unknown): unknown {\r\n    if (typeof data !== 'object' || data === null) {\r\n        return data;\r\n    } else if (Array.isArray(data)) {\r\n        return data.map(toCamelCaseValue);\r\n    } else {\r\n        const result: Record<string, unknown> = {};\r\n        for (const [key, value] of Object.entries(data)) {\r\n            result[toCamelCaseKey(key)] = toCamelCaseValue(value);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nexport function toCamelCaseKey(key: string): string {\r\n    return key.charAt(0).toLowerCase() + key.slice(1);\r\n}\r\n","module.exports = require(\"http\");","module.exports = require(\"net\");","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { RpcNullableBool, RpcNullableDouble, RpcNullableString, RpcNullableTimestamp } from '@azure/functions-core';\r\nimport { AzFuncSystemError } from '../errors';\r\nimport { isDefined } from '../utils/nonNull';\r\n\r\n/**\r\n * Converts boolean input to an 'INullableBool' to be sent through the RPC layer.\r\n * Input that is not a boolean but is also not null or undefined logs a function app level warning.\r\n * @param nullable Input to be converted to an INullableBool if it is a valid boolean\r\n * @param propertyName The name of the property that the caller will assign the output to. Used for debugging.\r\n */\r\nexport function toNullableBool(nullable: boolean | undefined, propertyName: string): undefined | RpcNullableBool {\r\n    if (typeof nullable === 'boolean') {\r\n        return <RpcNullableBool>{\r\n            value: nullable,\r\n        };\r\n    }\r\n\r\n    if (isDefined(nullable)) {\r\n        throw new AzFuncSystemError(\r\n            `A 'boolean' type was expected instead of a '${typeof nullable}' type. Cannot parse value of '${propertyName}'.`\r\n        );\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Converts number or string that parses to a number to an 'INullableDouble' to be sent through the RPC layer.\r\n * Input that is not a valid number but is also not null or undefined logs a function app level warning.\r\n * @param nullable Input to be converted to an INullableDouble if it is a valid number\r\n * @param propertyName The name of the property that the caller will assign the output to. Used for debugging.\r\n */\r\nexport function toNullableDouble(\r\n    nullable: number | string | undefined,\r\n    propertyName: string\r\n): undefined | RpcNullableDouble {\r\n    if (typeof nullable === 'number') {\r\n        return <RpcNullableDouble>{\r\n            value: nullable,\r\n        };\r\n    } else if (typeof nullable === 'string') {\r\n        if (!isNaN(Number(nullable))) {\r\n            const parsedNumber = parseFloat(nullable);\r\n            return <RpcNullableDouble>{\r\n                value: parsedNumber,\r\n            };\r\n        }\r\n    }\r\n\r\n    if (isDefined(nullable)) {\r\n        throw new AzFuncSystemError(\r\n            `A 'number' type was expected instead of a '${typeof nullable}' type. Cannot parse value of '${propertyName}'.`\r\n        );\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Converts string input to an 'INullableString' to be sent through the RPC layer.\r\n * Input that is not a string but is also not null or undefined logs a function app level warning.\r\n * @param nullable Input to be converted to an INullableString if it is a valid string\r\n * @param propertyName The name of the property that the caller will assign the output to. Used for debugging.\r\n */\r\nexport function toRpcString(nullable: string | undefined, propertyName: string): string {\r\n    if (typeof nullable === 'string') {\r\n        return nullable;\r\n    }\r\n\r\n    if (isDefined(nullable)) {\r\n        throw new AzFuncSystemError(\r\n            `A 'string' type was expected instead of a '${typeof nullable}' type. Cannot parse value of '${propertyName}'.`\r\n        );\r\n    }\r\n\r\n    return '';\r\n}\r\n\r\n/**\r\n * Converts string input to an 'INullableString' to be sent through the RPC layer.\r\n * Input that is not a string but is also not null or undefined logs a function app level warning.\r\n * @param nullable Input to be converted to an INullableString if it is a valid string\r\n * @param propertyName The name of the property that the caller will assign the output to. Used for debugging.\r\n */\r\nexport function toNullableString(nullable: string | undefined, propertyName: string): undefined | RpcNullableString {\r\n    if (typeof nullable === 'string') {\r\n        return <RpcNullableString>{\r\n            value: nullable,\r\n        };\r\n    }\r\n\r\n    if (isDefined(nullable)) {\r\n        throw new AzFuncSystemError(\r\n            `A 'string' type was expected instead of a '${typeof nullable}' type. Cannot parse value of '${propertyName}'.`\r\n        );\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\n/**\r\n * Converts Date or number input to an 'INullableTimestamp' to be sent through the RPC layer.\r\n * Input that is not a Date or number but is also not null or undefined logs a function app level warning.\r\n * @param nullable Input to be converted to an INullableTimestamp if it is valid input\r\n * @param propertyName The name of the property that the caller will assign the output to. Used for debugging.\r\n */\r\nexport function toNullableTimestamp(\r\n    dateTime: Date | number | undefined,\r\n    propertyName: string\r\n): RpcNullableTimestamp | undefined {\r\n    if (isDefined(dateTime)) {\r\n        try {\r\n            const timeInMilliseconds = typeof dateTime === 'number' ? dateTime : dateTime.getTime();\r\n\r\n            if (timeInMilliseconds && timeInMilliseconds >= 0) {\r\n                return {\r\n                    value: {\r\n                        seconds: Math.round(timeInMilliseconds / 1000),\r\n                    },\r\n                };\r\n            }\r\n        } catch {\r\n            throw new AzFuncSystemError(\r\n                `A 'number' or 'Date' input was expected instead of a '${typeof dateTime}'. Cannot parse value of '${propertyName}'.`\r\n            );\r\n        }\r\n    }\r\n    return undefined;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { Exception, RetryContext, TraceContext } from '@azure/functions';\r\nimport { RpcException, RpcRetryContext, RpcTraceContext } from '@azure/functions-core';\r\nimport { copyPropIfDefined, nonNullProp } from '../utils/nonNull';\r\n\r\nexport function fromRpcRetryContext(retryContext: RpcRetryContext | null | undefined): RetryContext | undefined {\r\n    if (!retryContext) {\r\n        return undefined;\r\n    } else {\r\n        const result: RetryContext = {\r\n            retryCount: nonNullProp(retryContext, 'retryCount'),\r\n            maxRetryCount: nonNullProp(retryContext, 'maxRetryCount'),\r\n        };\r\n        if (retryContext.exception) {\r\n            result.exception = fromRpcException(retryContext.exception);\r\n        }\r\n        return result;\r\n    }\r\n}\r\n\r\nfunction fromRpcException(exception: RpcException): Exception {\r\n    const result: Exception = {};\r\n    copyPropIfDefined(exception, result, 'message');\r\n    copyPropIfDefined(exception, result, 'source');\r\n    copyPropIfDefined(exception, result, 'stackTrace');\r\n    return result;\r\n}\r\n\r\nexport function fromRpcTraceContext(traceContext: RpcTraceContext | null | undefined): TraceContext | undefined {\r\n    if (!traceContext) {\r\n        return undefined;\r\n    } else {\r\n        const result: TraceContext = {};\r\n        copyPropIfDefined(traceContext, result, 'traceParent');\r\n        copyPropIfDefined(traceContext, result, 'traceState');\r\n        if (traceContext.attributes) {\r\n            result.attributes = traceContext.attributes;\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {\r\n    CosmosDBFunctionOptions,\r\n    EventGridFunctionOptions,\r\n    EventHubFunctionOptions,\r\n    FunctionTrigger,\r\n    GenericFunctionOptions,\r\n    HttpFunctionOptions,\r\n    HttpHandler,\r\n    HttpMethod,\r\n    HttpMethodFunctionOptions,\r\n    MySqlFunctionOptions,\r\n    ServiceBusQueueFunctionOptions,\r\n    ServiceBusTopicFunctionOptions,\r\n    SqlFunctionOptions,\r\n    StorageBlobFunctionOptions,\r\n    StorageQueueFunctionOptions,\r\n    TimerFunctionOptions,\r\n    WarmupFunctionOptions,\r\n    WebPubSubFunctionOptions,\r\n} from '@azure/functions';\r\nimport { FunctionCallback } from '@azure/functions-core';\r\nimport { toCoreFunctionMetadata } from './converters/toCoreFunctionMetadata';\r\nimport * as output from './output';\r\nimport { ProgrammingModel } from './ProgrammingModel';\r\nimport * as trigger from './trigger';\r\nimport { tryGetCoreApiLazy } from './utils/tryGetCoreApiLazy';\r\n\r\nexport * as hook from './hooks/registerHook';\r\nexport { setup } from './setup';\r\n\r\nlet hasSetModel = false;\r\nfunction setProgrammingModel() {\r\n    const coreApi = tryGetCoreApiLazy();\r\n    if (!coreApi) {\r\n        console.warn(\r\n            'WARNING: Failed to detect the Azure Functions runtime. Switching \"@azure/functions\" package to test mode - not all features are supported.'\r\n        );\r\n    } else {\r\n        coreApi.setProgrammingModel(new ProgrammingModel());\r\n    }\r\n    hasSetModel = true;\r\n}\r\n\r\nfunction convertToHttpOptions(\r\n    optionsOrHandler: HttpFunctionOptions | HttpHandler,\r\n    method: HttpMethod\r\n): HttpFunctionOptions {\r\n    const options: HttpFunctionOptions =\r\n        typeof optionsOrHandler === 'function' ? { handler: optionsOrHandler } : optionsOrHandler;\r\n    options.methods = [method];\r\n    return options;\r\n}\r\n\r\nfunction convertToGenericOptions<T extends Omit<GenericFunctionOptions, 'trigger'> & Partial<GenericFunctionOptions>>(\r\n    options: T,\r\n    triggerMethod: (\r\n        o: Omit<T, 'handler' | 'return' | 'trigger' | 'extraInputs' | 'extraOutputs' | 'retry'>\r\n    ) => FunctionTrigger\r\n): GenericFunctionOptions {\r\n    const { handler, return: ret, trigger, extraInputs, extraOutputs, retry, ...triggerOptions } = options;\r\n    return {\r\n        trigger: trigger ?? triggerMethod(triggerOptions),\r\n        return: ret,\r\n        retry,\r\n        extraInputs,\r\n        extraOutputs,\r\n        handler,\r\n    };\r\n}\r\n\r\nexport function get(name: string, optionsOrHandler: HttpMethodFunctionOptions | HttpHandler): void {\r\n    http(name, convertToHttpOptions(optionsOrHandler, 'GET'));\r\n}\r\n\r\nexport function put(name: string, optionsOrHandler: HttpMethodFunctionOptions | HttpHandler): void {\r\n    http(name, convertToHttpOptions(optionsOrHandler, 'PUT'));\r\n}\r\n\r\nexport function post(name: string, optionsOrHandler: HttpMethodFunctionOptions | HttpHandler): void {\r\n    http(name, convertToHttpOptions(optionsOrHandler, 'POST'));\r\n}\r\n\r\nexport function patch(name: string, optionsOrHandler: HttpMethodFunctionOptions | HttpHandler): void {\r\n    http(name, convertToHttpOptions(optionsOrHandler, 'PATCH'));\r\n}\r\n\r\nexport function deleteRequest(name: string, optionsOrHandler: HttpMethodFunctionOptions | HttpHandler): void {\r\n    http(name, convertToHttpOptions(optionsOrHandler, 'DELETE'));\r\n}\r\n\r\nexport function http(name: string, options: HttpFunctionOptions): void {\r\n    options.return ||= output.http({});\r\n    generic(name, convertToGenericOptions(options, trigger.http));\r\n}\r\n\r\nexport function timer(name: string, options: TimerFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.timer));\r\n}\r\n\r\nexport function storageBlob(name: string, options: StorageBlobFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.storageBlob));\r\n}\r\n\r\nexport function storageQueue(name: string, options: StorageQueueFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.storageQueue));\r\n}\r\n\r\nexport function serviceBusQueue(name: string, options: ServiceBusQueueFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.serviceBusQueue));\r\n}\r\n\r\nexport function serviceBusTopic(name: string, options: ServiceBusTopicFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.serviceBusTopic));\r\n}\r\n\r\nexport function eventHub(name: string, options: EventHubFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.eventHub));\r\n}\r\n\r\nexport function eventGrid(name: string, options: EventGridFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.eventGrid));\r\n}\r\n\r\nexport function cosmosDB(name: string, options: CosmosDBFunctionOptions): void {\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\r\n    generic(name, convertToGenericOptions(options, <any>trigger.cosmosDB));\r\n}\r\n\r\nexport function warmup(name: string, options: WarmupFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.warmup));\r\n}\r\n\r\nexport function sql(name: string, options: SqlFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.sql));\r\n}\r\n\r\nexport function mySql(name: string, options: MySqlFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.mySql));\r\n}\r\n\r\nexport function webPubSub(name: string, options: WebPubSubFunctionOptions): void {\r\n    generic(name, convertToGenericOptions(options, trigger.webPubSub));\r\n}\r\n\r\nexport function generic(name: string, options: GenericFunctionOptions): void {\r\n    if (!hasSetModel) {\r\n        setProgrammingModel();\r\n    }\r\n\r\n    const coreApi = tryGetCoreApiLazy();\r\n    if (!coreApi) {\r\n        console.warn(\r\n            `WARNING: Skipping call to register function \"${name}\" because the \"@azure/functions\" package is in test mode.`\r\n        );\r\n    } else {\r\n        coreApi.registerFunction(toCoreFunctionMetadata(name, options), <FunctionCallback>options.handler);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\n/**\r\n * Based off of VS Code\r\n * https://github.com/microsoft/vscode/blob/7bed4ce3e9f5059b5fc638c348f064edabcce5d2/src/vs/workbench/api/common/extHostTypes.ts#L65\r\n */\r\nexport class Disposable {\r\n    static from(...inDisposables: { dispose(): any }[]): Disposable {\r\n        let disposables: ReadonlyArray<{ dispose(): any }> | undefined = inDisposables;\r\n        return new Disposable(function () {\r\n            if (disposables) {\r\n                for (const disposable of disposables) {\r\n                    if (disposable && typeof disposable.dispose === 'function') {\r\n                        disposable.dispose();\r\n                    }\r\n                }\r\n                disposables = undefined;\r\n            }\r\n        });\r\n    }\r\n\r\n    #callOnDispose?: () => any;\r\n\r\n    constructor(callOnDispose: () => any) {\r\n        this.#callOnDispose = callOnDispose;\r\n    }\r\n\r\n    dispose(): any {\r\n        if (typeof this.#callOnDispose === 'function') {\r\n            this.#callOnDispose();\r\n            this.#callOnDispose = undefined;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { serialize as serializeCookie } from 'cookie';\r\nimport { EventEmitter } from 'events';\r\nimport * as http from 'http';\r\nimport * as net from 'net';\r\nimport { AzFuncSystemError, ensureErrorType } from '../errors';\r\nimport { nonNullProp } from '../utils/nonNull';\r\nimport { workerSystemLog } from '../utils/workerSystemLog';\r\nimport { HttpResponse } from './HttpResponse';\r\n\r\nconst requests: Record<string, http.IncomingMessage> = {};\r\nconst responses: Record<string, http.ServerResponse> = {};\r\nconst minPort = 55000;\r\nconst maxPort = 55025;\r\n\r\nconst invocRequestEmitter = new EventEmitter();\r\n\r\nexport async function waitForProxyRequest(invocationId: string): Promise<http.IncomingMessage> {\r\n    return new Promise((resolve, _reject) => {\r\n        const req = requests[invocationId];\r\n        if (req) {\r\n            resolve(req);\r\n            delete requests[invocationId];\r\n        } else {\r\n            invocRequestEmitter.once(invocationId, () => {\r\n                const req = requests[invocationId];\r\n                if (req) {\r\n                    resolve(req);\r\n                    delete requests[invocationId];\r\n                }\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nconst invocationIdHeader = 'x-ms-invocation-id';\r\nexport async function sendProxyResponse(invocationId: string, userRes: HttpResponse): Promise<void> {\r\n    const proxyRes = nonNullProp(responses, invocationId);\r\n    delete responses[invocationId];\r\n    for (const [key, val] of userRes.headers.entries()) {\r\n        proxyRes.setHeader(key, val);\r\n    }\r\n    proxyRes.setHeader(invocationIdHeader, invocationId);\r\n    proxyRes.statusCode = userRes.status;\r\n\r\n    if (userRes.cookies.length > 0) {\r\n        setCookies(userRes, proxyRes);\r\n    }\r\n\r\n    if (userRes.body) {\r\n        for await (const chunk of userRes.body.values()) {\r\n            proxyRes.write(chunk);\r\n        }\r\n    }\r\n    proxyRes.end();\r\n}\r\n\r\nfunction setCookies(userRes: HttpResponse, proxyRes: http.ServerResponse): void {\r\n    const serializedCookies: string[] = userRes.cookies.map((c) => {\r\n        let sameSite: true | false | 'lax' | 'strict' | 'none' | undefined;\r\n        switch (c.sameSite) {\r\n            case 'Lax':\r\n                sameSite = 'lax';\r\n                break;\r\n            case 'None':\r\n                sameSite = 'none';\r\n                break;\r\n            case 'Strict':\r\n                sameSite = 'strict';\r\n                break;\r\n            default:\r\n                sameSite = c.sameSite;\r\n        }\r\n        return serializeCookie(c.name, c.value, {\r\n            domain: c.domain,\r\n            path: c.path,\r\n            expires: typeof c.expires === 'number' ? new Date(c.expires) : c.expires,\r\n            secure: c.secure,\r\n            httpOnly: c.httpOnly,\r\n            sameSite: sameSite,\r\n            maxAge: c.maxAge,\r\n        });\r\n    });\r\n    proxyRes.setHeader('Set-Cookie', serializedCookies);\r\n}\r\n\r\nexport async function setupHttpProxy(): Promise<string> {\r\n    return new Promise((resolve, reject) => {\r\n        const server = http.createServer();\r\n\r\n        server.on('request', (req, res) => {\r\n            const invocationId = req.headers[invocationIdHeader];\r\n            if (typeof invocationId === 'string') {\r\n                requests[invocationId] = req;\r\n                responses[invocationId] = res;\r\n                invocRequestEmitter.emit(invocationId);\r\n            } else {\r\n                workerSystemLog('error', `Http proxy request missing header ${invocationIdHeader}`);\r\n            }\r\n        });\r\n\r\n        server.on('error', (err) => {\r\n            err = ensureErrorType(err);\r\n            workerSystemLog('error', `Http proxy error: ${err.stack || err.message}`);\r\n        });\r\n\r\n        server.listen(() => {\r\n            const address = server.address();\r\n            // Valid address has been created\r\n            if (address !== null && typeof address === 'object') {\r\n                if (address.port === 0) {\r\n                    // Auto-assigned port is 0, find and bind to an open port\r\n                    workerSystemLog('debug', `Port 0 assigned. Finding open port.`);\r\n                    findOpenPort((openPort: number) => {\r\n                        // Close the server and re-listen on the found open port\r\n                        server.close();\r\n                        server.listen(openPort, () => {\r\n                            workerSystemLog('debug', `Server is now listening on found open port: ${openPort}`);\r\n                        });\r\n                        resolve(`http://localhost:${openPort}/`);\r\n                    });\r\n                } else {\r\n                    // Auto-assigned port is not 0\r\n                    workerSystemLog('debug', `Auto-assigned port is valid. Port: ${address.port}`);\r\n                    resolve(`http://localhost:${address.port}/`);\r\n                }\r\n            } else {\r\n                reject(new AzFuncSystemError('Unexpected server address during http proxy setup'));\r\n            }\r\n        });\r\n\r\n        server.on('close', () => {\r\n            workerSystemLog('information', 'Http proxy closing');\r\n        });\r\n    });\r\n}\r\n\r\n// Function to find an open port starting from a specified port\r\nfunction findOpenPort(callback: (port: number) => void): void {\r\n    const server = net.createServer();\r\n\r\n    function tryPort(port: number) {\r\n        if (port > maxPort) {\r\n            // If we've reached the maximum port, throw an error\r\n            throw new AzFuncSystemError(\r\n                `No available ports found between ${minPort} and ${maxPort}. To enable HTTP streaming, please open a port in this range.`\r\n            );\r\n        }\r\n\r\n        server.once('error', () => {\r\n            // If the port is unavailable, increment and try the next one\r\n            tryPort(port + 1);\r\n        });\r\n\r\n        // If the port is available, return it\r\n        server.once('listening', () => {\r\n            const address = server.address();\r\n            if (address !== null && typeof address === 'object') {\r\n                port = address.port;\r\n                server.close();\r\n                callback(port);\r\n            }\r\n        });\r\n\r\n        // Try binding to the given port\r\n        server.listen(port);\r\n    }\r\n\r\n    // Start trying from the specified starting port\r\n    tryPort(minPort);\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { ExponentialBackoffRetryOptions, FixedDelayRetryOptions, GenericFunctionOptions } from '@azure/functions';\r\nimport * as coreTypes from '@azure/functions-core';\r\nimport { returnBindingKey } from '../constants';\r\nimport { AzFuncSystemError } from '../errors';\r\nimport { isTrigger } from '../utils/isTrigger';\r\nimport { workerSystemLog } from '../utils/workerSystemLog';\r\nimport { toRpcDuration } from './toRpcDuration';\r\n\r\nexport function toCoreFunctionMetadata(name: string, options: GenericFunctionOptions): coreTypes.FunctionMetadata {\r\n    const bindings: Record<string, coreTypes.RpcBindingInfo> = {};\r\n    const bindingNames: string[] = [];\r\n    const trigger = options.trigger;\r\n\r\n    bindings[trigger.name] = {\r\n        ...trigger,\r\n        direction: 'in',\r\n        type: isTrigger(trigger.type) ? trigger.type : trigger.type + 'Trigger',\r\n        properties: addSdkBindingsFlag(options.trigger?.sdkBinding, name, trigger.type, trigger.name, false),\r\n    };\r\n    bindingNames.push(trigger.name);\r\n\r\n    if (options.extraInputs) {\r\n        for (const input of options.extraInputs) {\r\n            bindings[input.name] = {\r\n                ...input,\r\n                direction: 'in',\r\n                properties: addSdkBindingsFlag(input?.sdkBinding, name, input.type, input.name, true),\r\n            };\r\n            bindingNames.push(input.name);\r\n        }\r\n    }\r\n\r\n    if (options.return) {\r\n        bindings[returnBindingKey] = {\r\n            ...options.return,\r\n            direction: 'out',\r\n        };\r\n        bindingNames.push(returnBindingKey);\r\n    }\r\n\r\n    if (options.extraOutputs) {\r\n        for (const output of options.extraOutputs) {\r\n            bindings[output.name] = {\r\n                ...output,\r\n                direction: 'out',\r\n            };\r\n            bindingNames.push(output.name);\r\n        }\r\n    }\r\n\r\n    const dupeBindings = bindingNames.filter((v, i) => bindingNames.indexOf(v) !== i);\r\n    if (dupeBindings.length > 0) {\r\n        throw new AzFuncSystemError(\r\n            `Duplicate bindings found for function \"${name}\". Remove a duplicate binding or manually specify the \"name\" property to make it unique.`\r\n        );\r\n    }\r\n\r\n    let retryOptions: coreTypes.RpcRetryOptions | undefined;\r\n    if (options.retry) {\r\n        retryOptions = {\r\n            ...options.retry,\r\n            retryStrategy: options.retry.strategy,\r\n            delayInterval: toRpcDuration((<FixedDelayRetryOptions>options.retry).delayInterval, 'retry.delayInterval'),\r\n            maximumInterval: toRpcDuration(\r\n                (<ExponentialBackoffRetryOptions>options.retry).maximumInterval,\r\n                'retry.maximumInterval'\r\n            ),\r\n            minimumInterval: toRpcDuration(\r\n                (<ExponentialBackoffRetryOptions>options.retry).minimumInterval,\r\n                'retry.minimumInterval'\r\n            ),\r\n        };\r\n    }\r\n\r\n    return { name, bindings, retryOptions };\r\n}\r\n\r\n/**\r\n * Adds the deferred binding flags to function bindings based on the binding configuration\r\n * @param sdkBindingType Boolean indicating if this is an SDK binding\r\n * @param functionName The name of the function for logging purposes\r\n * @param triggerType The type of the trigger or binding\r\n * @param bindingOrTriggerName The name of the trigger or binding\r\n * @param isBinding Boolean indicating if this is a binding (vs a trigger)\r\n * @returns Object with supportsDeferredBinding property set to 'true' or 'false'\r\n */\r\nexport function addSdkBindingsFlag(\r\n    sdkBindingType?: boolean | unknown,\r\n    functionName?: string,\r\n    triggerType?: string,\r\n    bindingOrTriggerName?: string,\r\n    isBinding?: boolean\r\n): { [key: string]: string } {\r\n    // Ensure that trigger type is valid and supported\r\n    if (sdkBindingType !== undefined && sdkBindingType === true) {\r\n        const entityType = isBinding ? 'binding' : 'trigger';\r\n\r\n        // Create structured JSON log entry\r\n        const logData = {\r\n            operation: 'EnableDeferredBinding',\r\n            properties: {\r\n                functionName: functionName || 'unknown',\r\n                entityType: entityType,\r\n                triggerType: triggerType || 'unknown',\r\n                bindingOrTriggerName: bindingOrTriggerName || 'unknown',\r\n                supportsDeferredBinding: true,\r\n            },\r\n            message: `Enabled Deferred Binding of type '${triggerType || 'unknown'}' for function '${\r\n                functionName || 'unknown'\r\n            }'`,\r\n        };\r\n        // Log both the structured data\r\n        console.log(JSON.stringify(logData));\r\n        workerSystemLog('information', JSON.stringify(logData));\r\n        return { supportsDeferredBinding: 'true' };\r\n    }\r\n\r\n    return { supportsDeferredBinding: 'false' };\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {\r\n    CosmosDBTrigger,\r\n    CosmosDBTriggerOptions,\r\n    EventGridTrigger,\r\n    EventGridTriggerOptions,\r\n    EventHubTrigger,\r\n    EventHubTriggerOptions,\r\n    FunctionTrigger,\r\n    GenericTriggerOptions,\r\n    HttpTrigger,\r\n    HttpTriggerOptions,\r\n    MySqlTrigger,\r\n    MySqlTriggerOptions,\r\n    ServiceBusQueueTrigger,\r\n    ServiceBusQueueTriggerOptions,\r\n    ServiceBusTopicTrigger,\r\n    ServiceBusTopicTriggerOptions,\r\n    SqlTrigger,\r\n    SqlTriggerOptions,\r\n    StorageBlobTrigger,\r\n    StorageBlobTriggerOptions,\r\n    StorageQueueTrigger,\r\n    StorageQueueTriggerOptions,\r\n    TimerTrigger,\r\n    TimerTriggerOptions,\r\n    WarmupTrigger,\r\n    WarmupTriggerOptions,\r\n    WebPubSubTrigger,\r\n    WebPubSubTriggerOptions,\r\n} from '@azure/functions';\r\nimport { addBindingName } from './addBindingName';\r\n\r\nexport function http(options: HttpTriggerOptions): HttpTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        authLevel: options.authLevel || 'anonymous',\r\n        methods: options.methods || ['GET', 'POST'],\r\n        type: 'httpTrigger',\r\n    });\r\n}\r\n\r\nexport function timer(options: TimerTriggerOptions): TimerTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'timerTrigger',\r\n    });\r\n}\r\n\r\nexport function storageBlob(options: StorageBlobTriggerOptions): StorageBlobTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'blobTrigger',\r\n    });\r\n}\r\n\r\nexport function storageQueue(options: StorageQueueTriggerOptions): StorageQueueTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'queueTrigger',\r\n    });\r\n}\r\n\r\nexport function serviceBusQueue(options: ServiceBusQueueTriggerOptions): ServiceBusQueueTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'serviceBusTrigger',\r\n    });\r\n}\r\n\r\nexport function serviceBusTopic(options: ServiceBusTopicTriggerOptions): ServiceBusTopicTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'serviceBusTrigger',\r\n    });\r\n}\r\n\r\nexport function eventHub(options: EventHubTriggerOptions): EventHubTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'eventHubTrigger',\r\n    });\r\n}\r\n\r\nexport function eventGrid(options: EventGridTriggerOptions): EventGridTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'eventGridTrigger',\r\n    });\r\n}\r\n\r\nexport function cosmosDB(options: CosmosDBTriggerOptions): CosmosDBTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'cosmosDBTrigger',\r\n    });\r\n}\r\n\r\nexport function warmup(options: WarmupTriggerOptions): WarmupTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'warmupTrigger',\r\n    });\r\n}\r\n\r\nexport function sql(options: SqlTriggerOptions): SqlTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'sqlTrigger',\r\n    });\r\n}\r\n\r\nexport function mySql(options: MySqlTriggerOptions): MySqlTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'mysqlTrigger',\r\n    });\r\n}\r\n\r\nexport function webPubSub(options: WebPubSubTriggerOptions): WebPubSubTrigger {\r\n    return addTriggerBindingName({\r\n        ...options,\r\n        type: 'webPubSubTrigger',\r\n    });\r\n}\r\n\r\nexport function generic(options: GenericTriggerOptions): FunctionTrigger {\r\n    return addTriggerBindingName(options);\r\n}\r\n\r\nfunction addTriggerBindingName<T extends { type: string; name?: string }>(binding: T): T & { name: string } {\r\n    return addBindingName(binding, 'Trigger');\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as coreTypes from '@azure/functions-core';\r\n\r\nlet coreApi: typeof coreTypes | undefined | null;\r\nexport function tryGetCoreApiLazy(): typeof coreTypes | null {\r\n    if (coreApi === undefined) {\r\n        try {\r\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n            coreApi = <typeof coreTypes>require('@azure/functions-core');\r\n        } catch {\r\n            coreApi = null;\r\n        }\r\n    }\r\n    return coreApi;\r\n}\r\n","module.exports = require(\"undici\");","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as crypto from 'crypto';\r\n\r\nexport function getRandomHexString(length = 10): string {\r\n    const buffer: Buffer = crypto.randomBytes(Math.ceil(length / 2));\r\n    return buffer.toString('hex').slice(0, length);\r\n}\r\n\r\nexport function getStringHash(data: string, length = 10): string {\r\n    return crypto.createHash('sha256').update(data).digest('hex').slice(0, length);\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { RpcTypedData } from '@azure/functions-core';\r\n\r\nexport function toRpcTypedData(data: unknown): RpcTypedData | null | undefined {\r\n    if (data === null || data === undefined) {\r\n        return data;\r\n    } else if (typeof data === 'string') {\r\n        return { string: data };\r\n    } else if (Buffer.isBuffer(data)) {\r\n        return { bytes: data };\r\n    } else if (ArrayBuffer.isView(data)) {\r\n        const bytes = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\r\n        return { bytes: bytes };\r\n    } else if (data instanceof ArrayBuffer) {\r\n        const bytes = new Uint8Array(data);\r\n        return { bytes: bytes };\r\n    } else if (typeof data === 'number') {\r\n        if (Number.isInteger(data)) {\r\n            return { int: data };\r\n        } else {\r\n            return { double: data };\r\n        }\r\n    } else {\r\n        return { json: JSON.stringify(data) };\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { HookContext } from './HookContext';\r\n\r\nexport class AppTerminateContext extends HookContext implements types.AppTerminateContext {}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { TriggerMetadata } from '@azure/functions';\r\nimport { RpcTypedData } from '@azure/functions-core';\r\nimport { isHttpTrigger, isTimerTrigger } from '../utils/isTrigger';\r\nimport { fromRpcTypedData } from './fromRpcTypedData';\r\nimport { toCamelCaseKey, toCamelCaseValue } from './toCamelCase';\r\n\r\nexport function fromRpcTriggerMetadata(\r\n    triggerMetadata: Record<string, RpcTypedData> | null | undefined,\r\n    triggerType: string\r\n): TriggerMetadata | undefined {\r\n    // For http and timer triggers, we will avoid using `triggerMetadata` for a few reasons:\r\n    // 1. It uses `toCamelCase` methods, which can lead to weird casing bugs\r\n    // 2. It's generally a large medley of properties that is difficult for us to document/type\r\n    // 3. We can represent that information on the request & timer objects instead\r\n    if (!triggerMetadata || isHttpTrigger(triggerType) || isTimerTrigger(triggerType)) {\r\n        return undefined;\r\n    } else {\r\n        const result: TriggerMetadata = {};\r\n        for (const [key, value] of Object.entries(triggerMetadata)) {\r\n            result[toCamelCaseKey(key)] = toCamelCaseValue(fromRpcTypedData(value));\r\n        }\r\n        return result;\r\n    }\r\n}\r\n","module.exports = require(\"events\");","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {\r\n    CosmosDBInput,\r\n    CosmosDBInputOptions,\r\n    FunctionInput,\r\n    GenericInputOptions,\r\n    MySqlInput,\r\n    MySqlInputOptions,\r\n    SqlInput,\r\n    SqlInputOptions,\r\n    StorageBlobInput,\r\n    StorageBlobInputOptions,\r\n    TableInput,\r\n    TableInputOptions,\r\n    WebPubSubConnectionInput,\r\n    WebPubSubConnectionInputOptions,\r\n    WebPubSubContextInput,\r\n    WebPubSubContextInputOptions,\r\n} from '@azure/functions';\r\nimport { addBindingName } from './addBindingName';\r\n\r\nexport function storageBlob(options: StorageBlobInputOptions): StorageBlobInput {\r\n    return addInputBindingName({\r\n        ...options,\r\n        type: 'blob',\r\n    });\r\n}\r\n\r\nexport function table(options: TableInputOptions): TableInput {\r\n    return addInputBindingName({\r\n        ...options,\r\n        type: 'table',\r\n    });\r\n}\r\n\r\nexport function cosmosDB(options: CosmosDBInputOptions): CosmosDBInput {\r\n    return addInputBindingName({\r\n        ...options,\r\n        type: 'cosmosDB',\r\n    });\r\n}\r\n\r\nexport function sql(options: SqlInputOptions): SqlInput {\r\n    return addInputBindingName({\r\n        ...options,\r\n        type: 'sql',\r\n    });\r\n}\r\n\r\nexport function mySql(options: MySqlInputOptions): MySqlInput {\r\n    return addInputBindingName({\r\n        ...options,\r\n        type: 'mysql',\r\n    });\r\n}\r\n\r\nexport function webPubSubConnection(options: WebPubSubConnectionInputOptions): WebPubSubConnectionInput {\r\n    return addInputBindingName({\r\n        ...options,\r\n        type: 'webPubSubConnection',\r\n    });\r\n}\r\n\r\nexport function webPubSubContext(options: WebPubSubContextInputOptions): WebPubSubContextInput {\r\n    return addInputBindingName({\r\n        ...options,\r\n        type: 'webPubSubContext',\r\n    });\r\n}\r\n\r\nexport function generic(options: GenericInputOptions): FunctionInput {\r\n    return addInputBindingName(options);\r\n}\r\n\r\nfunction addInputBindingName<T extends { type: string; name?: string }>(binding: T): T & { name: string } {\r\n    return addBindingName(binding, 'Input');\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { format } from 'util';\r\nimport { fallbackLogHandler } from './fallbackLogHandler';\r\nimport { tryGetCoreApiLazy } from './tryGetCoreApiLazy';\r\n\r\nexport function workerSystemLog(level: types.LogLevel, ...args: unknown[]): void {\r\n    const coreApi = tryGetCoreApiLazy();\r\n    // NOTE: coreApi.log doesn't exist on older versions of the worker\r\n    if (coreApi && coreApi.log) {\r\n        coreApi.log(level, 'system', format(...args));\r\n    } else {\r\n        fallbackLogHandler(level, ...args);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { RpcHttpData, RpcTypedData } from '@azure/functions-core';\r\nimport { AzFuncSystemError } from '../errors';\r\nimport { sendProxyResponse } from '../http/httpProxy';\r\nimport { HttpResponse } from '../http/HttpResponse';\r\nimport { enableHttpStream } from '../setup';\r\nimport { toRpcHttpCookie } from './toRpcHttpCookie';\r\nimport { toRpcTypedData } from './toRpcTypedData';\r\n\r\nexport async function toRpcHttp(invocationId: string, data: unknown): Promise<RpcTypedData | null | undefined> {\r\n    if (data === null || data === undefined) {\r\n        return data;\r\n    } else if (typeof data !== 'object') {\r\n        throw new AzFuncSystemError(\r\n            'The HTTP response must be an object with optional properties \"body\", \"status\", \"headers\", and \"cookies\".'\r\n        );\r\n    }\r\n\r\n    const response = data instanceof HttpResponse ? data : new HttpResponse(data);\r\n    if (enableHttpStream) {\r\n        // send http data over http proxy instead of rpc\r\n        await sendProxyResponse(invocationId, response);\r\n        return;\r\n    }\r\n\r\n    const rpcResponse: RpcHttpData = {};\r\n    rpcResponse.statusCode = response.status.toString();\r\n\r\n    rpcResponse.headers = {};\r\n    for (const [key, value] of response.headers.entries()) {\r\n        rpcResponse.headers[key] = value;\r\n    }\r\n\r\n    rpcResponse.cookies = [];\r\n    for (const cookie of response.cookies) {\r\n        rpcResponse.cookies.push(toRpcHttpCookie(cookie));\r\n    }\r\n\r\n    rpcResponse.enableContentNegotiation = response.enableContentNegotiation;\r\n\r\n    const bodyBytes = await response.arrayBuffer();\r\n    rpcResponse.body = toRpcTypedData(bodyBytes);\r\n\r\n    return { http: rpcResponse };\r\n}\r\n","module.exports = require(\"cookie\");","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { RpcNullableString } from '@azure/functions-core';\r\n\r\nexport function fromNullableMapping(\r\n    nullableMapping: Record<string, RpcNullableString> | null | undefined,\r\n    originalMapping?: Record<string, string> | null\r\n): Record<string, string> {\r\n    let converted: Record<string, string> = {};\r\n    if (nullableMapping && Object.keys(nullableMapping).length > 0) {\r\n        for (const key in nullableMapping) {\r\n            converted[key] = nullableMapping[key]?.value || '';\r\n        }\r\n    } else if (originalMapping && Object.keys(originalMapping).length > 0) {\r\n        converted = originalMapping;\r\n    }\r\n    return converted;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\n\r\nexport function fallbackLogHandler(level: types.LogLevel, ...args: unknown[]): void {\r\n    switch (level) {\r\n        case 'trace':\r\n            console.trace(...args);\r\n            break;\r\n        case 'debug':\r\n            console.debug(...args);\r\n            break;\r\n        case 'information':\r\n            console.info(...args);\r\n            break;\r\n        case 'warning':\r\n            console.warn(...args);\r\n            break;\r\n        case 'critical':\r\n        case 'error':\r\n            console.error(...args);\r\n            break;\r\n        default:\r\n            console.log(...args);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { ReadOnlyError } from '../errors';\r\nimport { nonNullProp } from '../utils/nonNull';\r\nimport { HookContext } from './HookContext';\r\n\r\nexport class LogHookContext extends HookContext implements types.LogHookContext {\r\n    #init: types.LogHookContextInit;\r\n\r\n    constructor(init?: types.LogHookContextInit) {\r\n        super(init);\r\n        this.#init = init ?? {};\r\n        this.#init.level ??= 'information';\r\n        this.#init.message ??= 'unknown';\r\n        this.#init.category ??= 'user';\r\n    }\r\n\r\n    get level(): types.LogLevel {\r\n        return nonNullProp(this.#init, 'level');\r\n    }\r\n\r\n    set level(value: types.LogLevel) {\r\n        this.#init.level = value;\r\n    }\r\n\r\n    get message(): string {\r\n        return nonNullProp(this.#init, 'message');\r\n    }\r\n\r\n    set message(value: string) {\r\n        this.#init.message = value;\r\n    }\r\n\r\n    get category(): types.LogCategory {\r\n        return nonNullProp(this.#init, 'category');\r\n    }\r\n\r\n    set category(_value: types.LogCategory) {\r\n        throw new ReadOnlyError('category');\r\n    }\r\n\r\n    get invocationContext(): types.InvocationContext | undefined {\r\n        return this.#init.invocationContext;\r\n    }\r\n\r\n    set invocationContext(_value: types.InvocationContext | undefined) {\r\n        throw new ReadOnlyError('invocationContext');\r\n    }\r\n}\r\n","module.exports = require(\"crypto\");","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { EffectiveFunctionOptions, FunctionInput, FunctionOutput, FunctionTrigger } from '@azure/functions';\r\nimport { RpcBindingInfo } from '@azure/functions-core';\r\nimport { returnBindingKey } from '../constants';\r\nimport { isTrigger } from '../utils/isTrigger';\r\nimport { nonNullProp, nonNullValue } from '../utils/nonNull';\r\n\r\nexport function fromRpcBindings(bindings: Record<string, RpcBindingInfo> | null | undefined): EffectiveFunctionOptions {\r\n    let trigger: FunctionTrigger | undefined;\r\n    let returnBinding: FunctionOutput | undefined;\r\n    const extraInputs: FunctionInput[] = [];\r\n    const extraOutputs: FunctionOutput[] = [];\r\n    for (const [name, binding] of Object.entries(nonNullValue(bindings, 'bindings'))) {\r\n        if (isTrigger(binding.type)) {\r\n            trigger = fromRpcBinding(name, binding);\r\n        } else if (name === returnBindingKey) {\r\n            returnBinding = fromRpcBinding(name, binding);\r\n        } else if (binding.direction === 'in') {\r\n            extraInputs.push(fromRpcBinding(name, binding));\r\n        } else if (binding.direction === 'out') {\r\n            extraOutputs.push(fromRpcBinding(name, binding));\r\n        }\r\n    }\r\n    return {\r\n        trigger: nonNullValue(trigger, 'trigger'),\r\n        return: returnBinding,\r\n        extraInputs,\r\n        extraOutputs,\r\n    };\r\n}\r\n\r\nfunction fromRpcBinding(name: string, binding: RpcBindingInfo): FunctionTrigger | FunctionInput | FunctionOutput {\r\n    return {\r\n        ...binding,\r\n        type: nonNullProp(binding, 'type'),\r\n        name,\r\n    };\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { ReadOnlyError } from '../errors';\r\nimport { nonNullProp } from '../utils/nonNull';\r\n\r\nexport class HookContext implements types.HookContext {\r\n    #init: types.HookContextInit;\r\n\r\n    constructor(init?: types.HookContextInit) {\r\n        this.#init = init ?? {};\r\n        this.#init.hookData ??= {};\r\n    }\r\n\r\n    get hookData(): Record<string, unknown> {\r\n        return nonNullProp(this.#init, 'hookData');\r\n    }\r\n\r\n    set hookData(_value: unknown) {\r\n        throw new ReadOnlyError('hookData');\r\n    }\r\n}\r\n","module.exports = require(\"@azure/functions-extensions-base\");","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as coreTypes from '@azure/functions-core';\r\nimport {\r\n    CoreInvocationContext,\r\n    InvocationArguments,\r\n    RpcBindingInfo,\r\n    RpcInvocationResponse,\r\n    RpcLogCategory,\r\n    RpcLogLevel,\r\n    RpcTypedData,\r\n} from '@azure/functions-core';\r\nimport { format } from 'util';\r\nimport { returnBindingKey } from './constants';\r\nimport { fromRpcBindings } from './converters/fromRpcBindings';\r\nimport { fromRpcRetryContext, fromRpcTraceContext } from './converters/fromRpcContext';\r\nimport { fromRpcTriggerMetadata } from './converters/fromRpcTriggerMetadata';\r\nimport { fromRpcTypedData } from './converters/fromRpcTypedData';\r\nimport { toCamelCaseValue } from './converters/toCamelCase';\r\nimport { toRpcHttp } from './converters/toRpcHttp';\r\nimport { toRpcTypedData } from './converters/toRpcTypedData';\r\nimport { AzFuncSystemError } from './errors';\r\nimport { waitForProxyRequest } from './http/httpProxy';\r\nimport { createStreamRequest } from './http/HttpRequest';\r\nimport { InvocationContext } from './InvocationContext';\r\nimport { enableHttpStream } from './setup';\r\nimport { isHttpTrigger, isTimerTrigger, isTrigger } from './utils/isTrigger';\r\nimport { isDefined, nonNullProp, nonNullValue } from './utils/nonNull';\r\n\r\nexport class InvocationModel implements coreTypes.InvocationModel {\r\n    #isDone = false;\r\n    #coreCtx: CoreInvocationContext;\r\n    #functionName: string;\r\n    #bindings: Record<string, RpcBindingInfo>;\r\n    #triggerType: string;\r\n\r\n    constructor(coreCtx: CoreInvocationContext) {\r\n        this.#coreCtx = coreCtx;\r\n        this.#functionName = nonNullProp(coreCtx.metadata, 'name');\r\n        this.#bindings = nonNullProp(coreCtx.metadata, 'bindings');\r\n        const triggerBinding = nonNullValue(\r\n            Object.values(this.#bindings).find((b) => isTrigger(b.type)),\r\n            'triggerBinding'\r\n        );\r\n        this.#triggerType = nonNullProp(triggerBinding, 'type');\r\n    }\r\n\r\n    // eslint-disable-next-line @typescript-eslint/require-await\r\n    async getArguments(): Promise<InvocationArguments> {\r\n        const req = this.#coreCtx.request;\r\n\r\n        const context = new InvocationContext({\r\n            invocationId: nonNullProp(this.#coreCtx, 'invocationId'),\r\n            functionName: this.#functionName,\r\n            logHandler: (level: RpcLogLevel, ...args: unknown[]) => this.#userLog(level, ...args),\r\n            retryContext: fromRpcRetryContext(req.retryContext),\r\n            traceContext: fromRpcTraceContext(req.traceContext),\r\n            triggerMetadata: fromRpcTriggerMetadata(req.triggerMetadata, this.#triggerType),\r\n            options: fromRpcBindings(this.#bindings),\r\n        });\r\n\r\n        const inputs: unknown[] = [];\r\n        if (req.inputData) {\r\n            for (const binding of req.inputData) {\r\n                const bindingName = nonNullProp(binding, 'name');\r\n\r\n                const rpcBinding = this.#bindings[bindingName];\r\n                if (!rpcBinding) {\r\n                    throw new AzFuncSystemError(\r\n                        `Failed to find binding \"${bindingName}\" in bindings \"${Object.keys(this.#bindings).join(\r\n                            ', '\r\n                        )}\".`\r\n                    );\r\n                }\r\n                const bindingType = rpcBinding.type;\r\n\r\n                let input: unknown;\r\n                if (isHttpTrigger(bindingType) && enableHttpStream) {\r\n                    const proxyRequest = await waitForProxyRequest(this.#coreCtx.invocationId);\r\n                    input = createStreamRequest(proxyRequest, nonNullProp(req, 'triggerMetadata'));\r\n                } else {\r\n                    input = fromRpcTypedData(binding.data);\r\n                }\r\n                if (isTimerTrigger(bindingType)) {\r\n                    input = toCamelCaseValue(input);\r\n                }\r\n                if (isTrigger(bindingType)) {\r\n                    inputs.push(input);\r\n                } else {\r\n                    context.extraInputs.set(bindingName, input);\r\n                }\r\n            }\r\n        }\r\n\r\n        return { context, inputs };\r\n    }\r\n\r\n    async invokeFunction(\r\n        context: InvocationContext,\r\n        inputs: unknown[],\r\n        handler: coreTypes.FunctionCallback\r\n    ): Promise<unknown> {\r\n        try {\r\n            return await Promise.resolve(handler(...inputs, context));\r\n        } finally {\r\n            this.#isDone = true;\r\n        }\r\n    }\r\n\r\n    async getResponse(context: InvocationContext, result: unknown): Promise<RpcInvocationResponse> {\r\n        const response: RpcInvocationResponse = { invocationId: this.#coreCtx.invocationId };\r\n\r\n        response.outputData = [];\r\n        let usedReturnValue = false;\r\n        for (const [name, binding] of Object.entries(this.#bindings)) {\r\n            if (binding.direction === 'out') {\r\n                if (name === returnBindingKey) {\r\n                    response.returnValue = await this.#convertOutput(context.invocationId, binding, result);\r\n                    usedReturnValue = true;\r\n                } else {\r\n                    const outputValue = await this.#convertOutput(\r\n                        context.invocationId,\r\n                        binding,\r\n                        context.extraOutputs.get(name)\r\n                    );\r\n                    if (isDefined(outputValue)) {\r\n                        response.outputData.push({ name, data: outputValue });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // This allows the return value of non-HTTP triggered functions to be passed back\r\n        // to the host, even if no explicit output binding is set. In most cases, this is ignored,\r\n        // but e.g., Durable uses this to pass orchestrator state back to the Durable extension, w/o\r\n        // an explicit output binding. See here for more details: https://github.com/Azure/azure-functions-nodejs-library/pull/25\r\n        if (!usedReturnValue && !isHttpTrigger(this.#triggerType)) {\r\n            response.returnValue = toRpcTypedData(result);\r\n        }\r\n\r\n        return response;\r\n    }\r\n\r\n    async #convertOutput(\r\n        invocationId: string,\r\n        binding: RpcBindingInfo,\r\n        value: unknown\r\n    ): Promise<RpcTypedData | null | undefined> {\r\n        if (binding.type?.toLowerCase() === 'http') {\r\n            return toRpcHttp(invocationId, value);\r\n        } else {\r\n            return toRpcTypedData(value);\r\n        }\r\n    }\r\n\r\n    #log(level: RpcLogLevel, logCategory: RpcLogCategory, ...args: unknown[]): void {\r\n        this.#coreCtx.log(level, logCategory, format(...args));\r\n    }\r\n\r\n    #systemLog(level: RpcLogLevel, ...args: unknown[]) {\r\n        this.#log(level, 'system', ...args);\r\n    }\r\n\r\n    #userLog(level: RpcLogLevel, ...args: unknown[]): void {\r\n        if (this.#isDone && this.#coreCtx.state !== 'postInvocationHooks') {\r\n            let badAsyncMsg =\r\n                \"Warning: Unexpected call to 'log' on the context object after function execution has completed. Please check for asynchronous calls that are not awaited. \";\r\n            badAsyncMsg += `Function name: ${this.#functionName}. Invocation Id: ${this.#coreCtx.invocationId}.`;\r\n            this.#systemLog('warning', badAsyncMsg);\r\n        }\r\n        this.#log(level, 'user', ...args);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { getStringHash } from './utils/getRandomHexString';\r\n\r\n/**\r\n * If the host spawns multiple workers, it expects the metadata (including binding name) to be the same across workers.\r\n * That means we need to generate binding names in a deterministic fashion, so we'll do that using a string hash of the binding data\r\n * A few considerations:\r\n * 1. We will include the binding type in the name to make it more readable\r\n * 2. Users can manually specify the name themselves and we will respect that\r\n * 3. The only time the hash should cause a conflict is if a single function has duplicate bindings. Not sure why someone would do that, but we will throw an error at function registration time\r\n * More info here: https://github.com/Azure/azure-functions-nodejs-worker/issues/638\r\n */\r\nexport function addBindingName<T extends { type: string; name?: string }>(\r\n    binding: T,\r\n    suffix: string\r\n): T & { name: string } {\r\n    if (!binding.name) {\r\n        let bindingType = binding.type;\r\n        if (!bindingType.toLowerCase().endsWith(suffix.toLowerCase())) {\r\n            bindingType += suffix;\r\n        }\r\n        binding.name = bindingType + getStringHash(JSON.stringify(binding));\r\n    }\r\n    return <T & { name: string }>binding;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport {\r\n    AppStartHandler,\r\n    AppTerminateHandler,\r\n    LogHookHandler,\r\n    PostInvocationHandler,\r\n    PreInvocationHandler,\r\n} from '@azure/functions';\r\nimport * as coreTypes from '@azure/functions-core';\r\nimport { AzFuncSystemError, ensureErrorType } from '../errors';\r\nimport { Disposable } from '../utils/Disposable';\r\nimport { tryGetCoreApiLazy } from '../utils/tryGetCoreApiLazy';\r\nimport { AppStartContext } from './AppStartContext';\r\nimport { AppTerminateContext } from './AppTerminateContext';\r\nimport { LogHookContext } from './LogHookContext';\r\nimport { PostInvocationContext } from './PostInvocationContext';\r\nimport { PreInvocationContext } from './PreInvocationContext';\r\n\r\nfunction registerHook(hookName: string, callback: coreTypes.HookCallback): coreTypes.Disposable {\r\n    const coreApi = tryGetCoreApiLazy();\r\n    if (!coreApi) {\r\n        console.warn(\r\n            `WARNING: Skipping call to register ${hookName} hook because the \"@azure/functions\" package is in test mode.`\r\n        );\r\n        return new Disposable(() => {\r\n            console.warn(\r\n                `WARNING: Skipping call to dispose ${hookName} hook because the \"@azure/functions\" package is in test mode.`\r\n            );\r\n        });\r\n    } else {\r\n        return coreApi.registerHook(hookName, callback);\r\n    }\r\n}\r\n\r\nexport function appStart(handler: AppStartHandler): Disposable {\r\n    return registerHook('appStart', (coreContext) => {\r\n        return handler(new AppStartContext(coreContext));\r\n    });\r\n}\r\n\r\nexport function appTerminate(handler: AppTerminateHandler): Disposable {\r\n    return registerHook('appTerminate', (coreContext) => {\r\n        return handler(new AppTerminateContext(coreContext));\r\n    });\r\n}\r\n\r\nexport function preInvocation(handler: PreInvocationHandler): Disposable {\r\n    return registerHook('preInvocation', (coreContext) => {\r\n        return handler(new PreInvocationContext(coreContext));\r\n    });\r\n}\r\n\r\nexport function postInvocation(handler: PostInvocationHandler): Disposable {\r\n    return registerHook('postInvocation', (coreContext) => {\r\n        return handler(new PostInvocationContext(coreContext));\r\n    });\r\n}\r\n\r\nexport function log(handler: LogHookHandler): Disposable {\r\n    try {\r\n        return registerHook('log', (coreContext) => {\r\n            return handler(new LogHookContext(coreContext));\r\n        });\r\n    } catch (err) {\r\n        const error = ensureErrorType(err);\r\n        if (error.name === 'RangeError' && error.isAzureFunctionsSystemError) {\r\n            throw new AzFuncSystemError(`Log hooks require Azure Functions Host v4.34 or higher.`);\r\n        } else {\r\n            throw err;\r\n        }\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport const version = '4.7.1-preview';\r\n\r\nexport const returnBindingKey = '$return';\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { InvocationHookContext } from './InvocationHookContext';\r\n\r\nexport class PostInvocationContext extends InvocationHookContext implements types.PostInvocationContext {\r\n    #init: types.PostInvocationContextInit;\r\n\r\n    constructor(init?: types.PostInvocationContextInit) {\r\n        super(init);\r\n        this.#init = init ?? {};\r\n    }\r\n\r\n    get result(): unknown {\r\n        return this.#init.result;\r\n    }\r\n\r\n    set result(value: unknown) {\r\n        this.#init.result = value;\r\n    }\r\n\r\n    get error(): unknown {\r\n        return this.#init.error;\r\n    }\r\n\r\n    set error(value: unknown) {\r\n        this.#init.error = value;\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { HookContext } from './HookContext';\r\n\r\nexport class AppStartContext extends HookContext implements types.AppStartContext {}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { Cookie } from '@azure/functions';\r\nimport { RpcHttpCookie, RpcHttpCookieSameSite } from '@azure/functions-core';\r\nimport { toNullableBool, toNullableDouble, toNullableString, toNullableTimestamp, toRpcString } from './toRpcNullable';\r\n\r\n/**\r\n * From RFC specifications for 'Set-Cookie' response header: https://www.rfc-editor.org/rfc/rfc6265.txt\r\n * @param inputCookie\r\n */\r\nexport function toRpcHttpCookie(inputCookie: Cookie): RpcHttpCookie {\r\n    // Resolve RpcHttpCookie.SameSite enum, a one-off\r\n    let rpcSameSite: RpcHttpCookieSameSite = 'none';\r\n    if (inputCookie && inputCookie.sameSite) {\r\n        const sameSite = inputCookie.sameSite.toLocaleLowerCase();\r\n        if (sameSite === 'lax') {\r\n            rpcSameSite = 'lax';\r\n        } else if (sameSite === 'strict') {\r\n            rpcSameSite = 'strict';\r\n        } else if (sameSite === 'none') {\r\n            rpcSameSite = 'explicitNone';\r\n        }\r\n    }\r\n\r\n    const rpcCookie: RpcHttpCookie = {\r\n        name: inputCookie && toRpcString(inputCookie.name, 'cookie.name'),\r\n        value: inputCookie && toRpcString(inputCookie.value, 'cookie.value'),\r\n        domain: toNullableString(inputCookie && inputCookie.domain, 'cookie.domain'),\r\n        path: toNullableString(inputCookie && inputCookie.path, 'cookie.path'),\r\n        expires: toNullableTimestamp(inputCookie && inputCookie.expires, 'cookie.expires'),\r\n        secure: toNullableBool(inputCookie && inputCookie.secure, 'cookie.secure'),\r\n        httpOnly: toNullableBool(inputCookie && inputCookie.httpOnly, 'cookie.httpOnly'),\r\n        sameSite: rpcSameSite,\r\n        maxAge: toNullableDouble(inputCookie && inputCookie.maxAge, 'cookie.maxAge'),\r\n    };\r\n\r\n    return rpcCookie;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { HttpRequestParams, HttpRequestUser } from '@azure/functions';\r\nimport { RpcHttpData, RpcTypedData } from '@azure/functions-core';\r\nimport { Blob } from 'buffer';\r\nimport { IncomingMessage } from 'http';\r\nimport * as stream from 'stream';\r\nimport { ReadableStream } from 'stream/web';\r\nimport { FormData, Headers, HeadersInit, Request as uRequest } from 'undici';\r\nimport { URLSearchParams } from 'url';\r\nimport { fromNullableMapping } from '../converters/fromRpcNullable';\r\nimport { fromRpcTypedData } from '../converters/fromRpcTypedData';\r\nimport { AzFuncSystemError } from '../errors';\r\nimport { isDefined, nonNullProp } from '../utils/nonNull';\r\nimport { extractHttpUserFromHeaders } from './extractHttpUserFromHeaders';\r\n\r\ninterface InternalHttpRequestInit extends RpcHttpData {\r\n    undiciRequest?: uRequest;\r\n}\r\n\r\nexport class HttpRequest implements types.HttpRequest {\r\n    readonly query: URLSearchParams;\r\n    readonly params: HttpRequestParams;\r\n\r\n    #cachedUser?: HttpRequestUser | null;\r\n    #uReq: uRequest;\r\n    #init: InternalHttpRequestInit;\r\n\r\n    constructor(init: InternalHttpRequestInit) {\r\n        this.#init = init;\r\n\r\n        let uReq = init.undiciRequest;\r\n        if (!uReq) {\r\n            const url = nonNullProp(init, 'url');\r\n\r\n            let body: Buffer | string | undefined;\r\n            if (init.body?.bytes) {\r\n                body = Buffer.from(init.body?.bytes);\r\n            } else if (init.body?.string) {\r\n                body = init.body.string;\r\n            }\r\n\r\n            uReq = new uRequest(url, {\r\n                body,\r\n                method: nonNullProp(init, 'method'),\r\n                headers: fromNullableMapping(init.nullableHeaders, init.headers),\r\n            });\r\n        }\r\n        this.#uReq = uReq;\r\n\r\n        if (init.nullableQuery || init.query) {\r\n            this.query = new URLSearchParams(fromNullableMapping(init.nullableQuery, init.query));\r\n        } else {\r\n            this.query = new URL(this.#uReq.url).searchParams;\r\n        }\r\n\r\n        this.params = fromNullableMapping(init.nullableParams, init.params);\r\n    }\r\n\r\n    get url(): string {\r\n        return this.#uReq.url;\r\n    }\r\n\r\n    get method(): string {\r\n        return this.#uReq.method;\r\n    }\r\n\r\n    get headers(): Headers {\r\n        return this.#uReq.headers;\r\n    }\r\n\r\n    get user(): HttpRequestUser | null {\r\n        if (this.#cachedUser === undefined) {\r\n            this.#cachedUser = extractHttpUserFromHeaders(this.headers);\r\n        }\r\n\r\n        return this.#cachedUser;\r\n    }\r\n\r\n    get body(): ReadableStream<any> | null {\r\n        return this.#uReq.body;\r\n    }\r\n\r\n    get bodyUsed(): boolean {\r\n        return this.#uReq.bodyUsed;\r\n    }\r\n\r\n    async arrayBuffer(): Promise<ArrayBuffer> {\r\n        return this.#uReq.arrayBuffer();\r\n    }\r\n\r\n    async blob(): Promise<Blob> {\r\n        return this.#uReq.blob();\r\n    }\r\n\r\n    async formData(): Promise<FormData> {\r\n        return this.#uReq.formData();\r\n    }\r\n\r\n    async json(): Promise<unknown> {\r\n        return this.#uReq.json();\r\n    }\r\n\r\n    async text(): Promise<string> {\r\n        return this.#uReq.text();\r\n    }\r\n\r\n    clone(): HttpRequest {\r\n        const newInit = structuredClone(this.#init);\r\n        newInit.undiciRequest = this.#uReq.clone();\r\n        return new HttpRequest(newInit);\r\n    }\r\n}\r\n\r\nexport function createStreamRequest(\r\n    proxyReq: IncomingMessage,\r\n    triggerMetadata: Record<string, RpcTypedData>\r\n): HttpRequest {\r\n    const hostHeaderName = 'x-forwarded-host';\r\n    const protoHeaderName = 'x-forwarded-proto';\r\n    const host = proxyReq.headers[hostHeaderName];\r\n    const proto = proxyReq.headers[protoHeaderName];\r\n    if (typeof host !== 'string' || typeof proto !== 'string') {\r\n        throw new AzFuncSystemError(`Expected headers \"${hostHeaderName}\" and \"${protoHeaderName}\" to be set.`);\r\n    }\r\n    const url = `${proto}://${host}${nonNullProp(proxyReq, 'url')}`;\r\n\r\n    let body: stream.Readable | undefined;\r\n    const lowerMethod = proxyReq.method?.toLowerCase();\r\n    if (lowerMethod !== 'get' && lowerMethod !== 'head') {\r\n        body = proxyReq;\r\n    }\r\n\r\n    // Get headers and params from trigger metadata\r\n    // See here for more info: https://github.com/Azure/azure-functions-host/issues/9840\r\n    // NOTE: We ignore query info because it has this bug: https://github.com/Azure/azure-functions-nodejs-library/issues/168\r\n    const { Query: rpcQueryIgnored, Headers: rpcHeaders, ...rpcParams } = triggerMetadata;\r\n\r\n    let headers: HeadersInit | undefined;\r\n    const headersData = fromRpcTypedData(rpcHeaders);\r\n    if (typeof headersData === 'object' && isDefined(headersData)) {\r\n        headers = <HeadersInit>headersData;\r\n    }\r\n\r\n    const uReq = new uRequest(url, {\r\n        body,\r\n        duplex: 'half',\r\n        method: nonNullProp(proxyReq, 'method'),\r\n        headers,\r\n    });\r\n\r\n    const params: Record<string, string> = {};\r\n    for (const [key, rpcValue] of Object.entries(rpcParams)) {\r\n        if (isDefined(rpcValue.string)) {\r\n            params[key] = rpcValue.string;\r\n        }\r\n    }\r\n\r\n    return new HttpRequest({\r\n        undiciRequest: uReq,\r\n        params,\r\n    });\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport * as app from './app';\r\nexport { AppStartContext } from './hooks/AppStartContext';\r\nexport { AppTerminateContext } from './hooks/AppTerminateContext';\r\nexport { HookContext } from './hooks/HookContext';\r\nexport { InvocationHookContext } from './hooks/InvocationHookContext';\r\nexport { LogHookContext } from './hooks/LogHookContext';\r\nexport { PostInvocationContext } from './hooks/PostInvocationContext';\r\nexport { PreInvocationContext } from './hooks/PreInvocationContext';\r\nexport { HttpRequest } from './http/HttpRequest';\r\nexport { HttpResponse } from './http/HttpResponse';\r\nexport * as input from './input';\r\nexport { InvocationContext } from './InvocationContext';\r\nexport * as output from './output';\r\nexport * as trigger from './trigger';\r\nexport { Disposable } from './utils/Disposable';\r\n\r\nexport enum SqlChangeOperation {\r\n    Insert = 0,\r\n    Update = 1,\r\n    Delete = 2,\r\n}\r\n\r\nexport enum MySqlChangeOperation {\r\n    Update = 0,\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport {\r\n    EffectiveFunctionOptions,\r\n    InvocationContextInit,\r\n    LogHandler,\r\n    RetryContext,\r\n    TraceContext,\r\n    TriggerMetadata,\r\n} from '@azure/functions';\r\nimport { fallbackLogHandler } from './utils/fallbackLogHandler';\r\n\r\nexport class InvocationContext implements types.InvocationContext {\r\n    invocationId: string;\r\n    functionName: string;\r\n    extraInputs: InvocationContextExtraInputs;\r\n    extraOutputs: InvocationContextExtraOutputs;\r\n    retryContext?: RetryContext;\r\n    traceContext?: TraceContext;\r\n    triggerMetadata?: TriggerMetadata;\r\n    options: EffectiveFunctionOptions;\r\n    #userLogHandler: LogHandler;\r\n\r\n    constructor(init?: InvocationContextInit) {\r\n        init = init || {};\r\n        const fallbackString = 'unknown';\r\n        this.invocationId = init.invocationId || fallbackString;\r\n        this.functionName = init.functionName || fallbackString;\r\n        this.extraInputs = new InvocationContextExtraInputs();\r\n        this.extraOutputs = new InvocationContextExtraOutputs();\r\n        this.retryContext = init.retryContext;\r\n        this.traceContext = init.traceContext;\r\n        this.triggerMetadata = init.triggerMetadata;\r\n        this.options = {\r\n            trigger: init.options?.trigger || {\r\n                name: fallbackString,\r\n                type: fallbackString,\r\n            },\r\n            return: init.options?.return,\r\n            extraInputs: init.options?.extraInputs || [],\r\n            extraOutputs: init.options?.extraOutputs || [],\r\n        };\r\n        this.#userLogHandler = init.logHandler || fallbackLogHandler;\r\n    }\r\n\r\n    log(...args: unknown[]): void {\r\n        this.#userLogHandler('information', ...args);\r\n    }\r\n\r\n    trace(...args: unknown[]): void {\r\n        this.#userLogHandler('trace', ...args);\r\n    }\r\n\r\n    debug(...args: unknown[]): void {\r\n        this.#userLogHandler('debug', ...args);\r\n    }\r\n\r\n    info(...args: unknown[]): void {\r\n        this.#userLogHandler('information', ...args);\r\n    }\r\n\r\n    warn(...args: unknown[]): void {\r\n        this.#userLogHandler('warning', ...args);\r\n    }\r\n\r\n    error(...args: unknown[]): void {\r\n        this.#userLogHandler('error', ...args);\r\n    }\r\n}\r\n\r\nclass InvocationContextExtraInputs implements types.InvocationContextExtraInputs {\r\n    #inputs: Record<string, unknown> = {};\r\n    get(inputOrName: types.FunctionInput | string): any {\r\n        const name = typeof inputOrName === 'string' ? inputOrName : inputOrName.name;\r\n        return this.#inputs[name];\r\n    }\r\n    set(inputOrName: types.FunctionInput | string, value: unknown): void {\r\n        const name = typeof inputOrName === 'string' ? inputOrName : inputOrName.name;\r\n        this.#inputs[name] = value;\r\n    }\r\n}\r\n\r\nclass InvocationContextExtraOutputs implements types.InvocationContextExtraOutputs {\r\n    #outputs: Record<string, unknown> = {};\r\n    get(outputOrName: types.FunctionOutput | string): unknown {\r\n        const name = typeof outputOrName === 'string' ? outputOrName : outputOrName.name;\r\n        return this.#outputs[name];\r\n    }\r\n    set(outputOrName: types.FunctionOutput | string, value: unknown): void {\r\n        const name = typeof outputOrName === 'string' ? outputOrName : outputOrName.name;\r\n        this.#outputs[name] = value;\r\n    }\r\n}\r\n","module.exports = require(\"util\");","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { RpcDuration } from '@azure/functions-core';\r\nimport { Duration } from '../../types';\r\nimport { AzFuncSystemError } from '../errors';\r\nimport { isDefined } from '../utils/nonNull';\r\n\r\nexport function toRpcDuration(dateTime: Duration | number | undefined, propertyName: string): RpcDuration | undefined {\r\n    if (isDefined(dateTime)) {\r\n        try {\r\n            let timeInMilliseconds: number | undefined;\r\n            if (typeof dateTime === 'object') {\r\n                const minutes = (dateTime.minutes || 0) + (dateTime.hours || 0) * 60;\r\n                const seconds = (dateTime.seconds || 0) + minutes * 60;\r\n                timeInMilliseconds = (dateTime.milliseconds || 0) + seconds * 1000;\r\n            } else if (typeof dateTime === 'number') {\r\n                timeInMilliseconds = dateTime;\r\n            }\r\n\r\n            if (isDefined(timeInMilliseconds) && timeInMilliseconds >= 0) {\r\n                return {\r\n                    seconds: Math.round(timeInMilliseconds / 1000),\r\n                };\r\n            }\r\n        } catch {\r\n            // fall through\r\n        }\r\n\r\n        throw new AzFuncSystemError(\r\n            `A 'number' or 'Duration' object was expected instead of a '${typeof dateTime}'. Cannot parse value of '${propertyName}'.`\r\n        );\r\n    }\r\n\r\n    return undefined;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { HttpRequestUser } from '@azure/functions';\r\nimport { Headers } from 'undici';\r\nimport { nonNullValue } from '../utils/nonNull';\r\n\r\n/* grandfathered in. Should fix when possible */\r\n/* eslint-disable @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-member-access */\r\n\r\nexport function extractHttpUserFromHeaders(headers: Headers): HttpRequestUser | null {\r\n    let user: HttpRequestUser | null = null;\r\n\r\n    const clientPrincipal = headers.get('x-ms-client-principal');\r\n    if (clientPrincipal) {\r\n        const claimsPrincipalData = JSON.parse(Buffer.from(clientPrincipal, 'base64').toString('utf-8'));\r\n\r\n        if (claimsPrincipalData['identityProvider']) {\r\n            user = {\r\n                type: 'StaticWebApps',\r\n                id: claimsPrincipalData['userId'],\r\n                username: claimsPrincipalData['userDetails'],\r\n                identityProvider: claimsPrincipalData['identityProvider'],\r\n                claimsPrincipalData,\r\n            };\r\n        } else {\r\n            user = {\r\n                type: 'AppService',\r\n                id: nonNullValue(headers.get('x-ms-client-principal-id'), 'user-id'),\r\n                username: nonNullValue(headers.get('x-ms-client-principal-name'), 'user-name'),\r\n                identityProvider: nonNullValue(headers.get('x-ms-client-principal-idp'), 'user-idp'),\r\n                claimsPrincipalData,\r\n            };\r\n        }\r\n    }\r\n\r\n    return user;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { nonNullProp } from '../utils/nonNull';\r\nimport { InvocationHookContext } from './InvocationHookContext';\r\n\r\nexport class PreInvocationContext extends InvocationHookContext implements types.PreInvocationContext {\r\n    #init: types.PreInvocationContextInit;\r\n\r\n    constructor(init?: types.PreInvocationContextInit) {\r\n        super(init);\r\n        this.#init = init ?? {};\r\n        this.#init.functionCallback ??= () => {};\r\n    }\r\n\r\n    get functionHandler(): types.FunctionHandler {\r\n        return nonNullProp(this.#init, 'functionCallback');\r\n    }\r\n\r\n    set functionHandler(value: types.FunctionHandler) {\r\n        this.#init.functionCallback = value;\r\n    }\r\n}\r\n","module.exports = require(\"@azure/functions-core\");","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { HttpResponseInit } from '@azure/functions';\r\nimport { Blob } from 'buffer';\r\nimport { ReadableStream } from 'stream/web';\r\nimport { FormData, Headers, Response as uResponse, ResponseInit as uResponseInit } from 'undici';\r\nimport { isDefined } from '../utils/nonNull';\r\n\r\ninterface InternalHttpResponseInit extends HttpResponseInit {\r\n    undiciResponse?: uResponse;\r\n}\r\n\r\nexport class HttpResponse implements types.HttpResponse {\r\n    readonly cookies: types.Cookie[];\r\n    readonly enableContentNegotiation: boolean;\r\n\r\n    #uRes: uResponse;\r\n    #init: InternalHttpResponseInit;\r\n\r\n    constructor(init?: InternalHttpResponseInit) {\r\n        init ??= {};\r\n        this.#init = init;\r\n\r\n        if (init.undiciResponse) {\r\n            this.#uRes = init.undiciResponse;\r\n        } else {\r\n            const uResInit: uResponseInit = { status: init.status, headers: init.headers };\r\n            if (isDefined(init.jsonBody)) {\r\n                this.#uRes = uResponse.json(init.jsonBody, uResInit);\r\n            } else {\r\n                this.#uRes = new uResponse(init.body, uResInit);\r\n            }\r\n        }\r\n\r\n        this.cookies = init.cookies ?? [];\r\n        this.enableContentNegotiation = !!init.enableContentNegotiation;\r\n    }\r\n\r\n    get status(): number {\r\n        return this.#uRes.status;\r\n    }\r\n\r\n    get headers(): Headers {\r\n        return this.#uRes.headers;\r\n    }\r\n\r\n    get body(): ReadableStream<any> | null {\r\n        return this.#uRes.body;\r\n    }\r\n\r\n    get bodyUsed(): boolean {\r\n        return this.#uRes.bodyUsed;\r\n    }\r\n\r\n    async arrayBuffer(): Promise<ArrayBuffer> {\r\n        return this.#uRes.arrayBuffer();\r\n    }\r\n\r\n    async blob(): Promise<Blob> {\r\n        return this.#uRes.blob();\r\n    }\r\n\r\n    async formData(): Promise<FormData> {\r\n        return this.#uRes.formData();\r\n    }\r\n\r\n    async json(): Promise<unknown> {\r\n        return this.#uRes.json();\r\n    }\r\n\r\n    async text(): Promise<string> {\r\n        return this.#uRes.text();\r\n    }\r\n\r\n    clone(): HttpResponse {\r\n        const newInit = structuredClone(this.#init);\r\n        newInit.undiciResponse = this.#uRes.clone();\r\n        return new HttpResponse(newInit);\r\n    }\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport { AzFuncSystemError } from '../errors';\r\n\r\n/**\r\n * Retrieves a property by name from an object and checks that it's not null and not undefined.  It is strongly typed\r\n * for the property and will give a compile error if the given name is not a property of the source.\r\n */\r\nexport function nonNullProp<TSource, TKey extends keyof TSource>(\r\n    source: TSource,\r\n    name: TKey\r\n): NonNullable<TSource[TKey]> {\r\n    const value: NonNullable<TSource[TKey]> = <NonNullable<TSource[TKey]>>source[name];\r\n    return nonNullValue(value, <string>name);\r\n}\r\n\r\n/**\r\n * Validates that a given value is not null and not undefined.\r\n */\r\nexport function nonNullValue<T>(value: T | undefined | null, propertyNameOrMessage?: string): T {\r\n    if (value === null || value === undefined) {\r\n        throw new AzFuncSystemError(\r\n            'Internal error: Expected value to be neither null nor undefined' +\r\n                (propertyNameOrMessage ? `: ${propertyNameOrMessage}` : '')\r\n        );\r\n    }\r\n\r\n    return value;\r\n}\r\n\r\nexport function copyPropIfDefined<TData, TKey extends keyof TData>(source: TData, destination: TData, key: TKey): void {\r\n    if (source[key] !== null && source[key] !== undefined) {\r\n        destination[key] = source[key];\r\n    }\r\n}\r\n\r\nexport function isDefined<T>(data: T | undefined | null): data is T {\r\n    return data !== null && data !== undefined;\r\n}\r\n","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nimport * as types from '@azure/functions';\r\nimport { ReadOnlyError } from '../errors';\r\nimport { InvocationContext } from '../InvocationContext';\r\nimport { nonNullProp } from '../utils/nonNull';\r\nimport { HookContext } from './HookContext';\r\n\r\nexport class InvocationHookContext extends HookContext implements types.InvocationHookContext {\r\n    #init: types.InvocationHookContextInit;\r\n\r\n    constructor(init?: types.InvocationHookContextInit) {\r\n        super(init);\r\n        this.#init = init ?? {};\r\n        this.#init.inputs ??= [];\r\n        this.#init.invocationContext ??= new InvocationContext();\r\n    }\r\n\r\n    get invocationContext(): types.InvocationContext {\r\n        return nonNullProp(this.#init, 'invocationContext');\r\n    }\r\n\r\n    set invocationContext(_value: types.InvocationContext) {\r\n        throw new ReadOnlyError('invocationContext');\r\n    }\r\n\r\n    get inputs(): unknown[] {\r\n        return nonNullProp(this.#init, 'inputs');\r\n    }\r\n\r\n    set inputs(value: unknown[]) {\r\n        this.#init.inputs = value;\r\n    }\r\n}\r\n","module.exports = require(\"url\");","// Copyright (c) .NET Foundation. All rights reserved.\r\n// Licensed under the MIT License.\r\n\r\nexport function isTrigger(typeName: string | undefined | null): boolean {\r\n    return !!typeName && /trigger$/i.test(typeName);\r\n}\r\n\r\nexport function isHttpTrigger(typeName: string | undefined | null): boolean {\r\n    return typeName?.toLowerCase() === 'httptrigger';\r\n}\r\n\r\nexport function isTimerTrigger(typeName: string | undefined | null): boolean {\r\n    return typeName?.toLowerCase() === 'timertrigger';\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(8156);\n"],"names":["setupLocked","enableHttpStream","capabilities","opts","AzFuncSystemError","coreApi","tryGetCoreApiLazy","log","isDefined","key","val","Object","entries","String","workerSystemLog","name","version","getInvocationModel","coreCtx","InvocationModel","getCapabilities","workerCapabilities","lockSetup","httpUri","setupHttpProxy","HttpUri","assign","tryJsonParse","data","JSON","parse","string","json","bytes","Buffer","from","stream","http","HttpRequest","int","double","collectionBytes","map","d","collectionString","collectionDouble","collectionSint64","sint64","modelBindingData","content","ResourceFactoryResolver","getInstance","createClient","source","exception","Error","message","isAzureFunctionsSystemError","AzFuncTypeError","TypeError","AzFuncRangeError","RangeError","constructor","propertyName","super","err","stringify","addOutputBindingName","binding","addBindingName","options","type","toCamelCaseKey","charAt","toLowerCase","slice","toCamelCaseValue","Array","isArray","result","value","module","exports","require","nullable","isNaN","Number","parseFloat","dateTime","timeInMilliseconds","getTime","seconds","Math","round","retryContext","retryCount","nonNullProp","maxRetryCount","copyPropIfDefined","fromRpcException","traceContext","attributes","setup","hasSetModel","convertToHttpOptions","optionsOrHandler","method","handler","methods","convertToGenericOptions","triggerMethod","return","ret","trigger","extraInputs","extraOutputs","retry","triggerOptions","output","generic","setProgrammingModel","ProgrammingModel","console","warn","registerFunction","toCoreFunctionMetadata","timer","storageBlob","storageQueue","serviceBusQueue","serviceBusTopic","eventHub","eventGrid","cosmosDB","warmup","sql","mySql","webPubSub","Disposable","inDisposables","disposables","disposable","dispose","undefined","callOnDispose","this","requests","responses","invocRequestEmitter","EventEmitter","invocationId","Promise","resolve","_reject","req","once","invocationIdHeader","userRes","proxyRes","headers","setHeader","statusCode","status","cookies","length","serializedCookies","c","sameSite","serialize","domain","path","expires","Date","secure","httpOnly","maxAge","setCookies","body","values","chunk","write","end","reject","server","createServer","on","res","emit","ensureErrorType","stack","listen","address","port","callback","net","tryPort","close","findOpenPort","openPort","addSdkBindingsFlag","sdkBindingType","functionName","triggerType","bindingOrTriggerName","isBinding","logData","operation","properties","entityType","supportsDeferredBinding","bindings","bindingNames","direction","isTrigger","sdkBinding","push","input","returnBindingKey","filter","v","i","indexOf","retryOptions","retryStrategy","strategy","delayInterval","toRpcDuration","maximumInterval","minimumInterval","addTriggerBindingName","authLevel","crypto","randomBytes","ceil","toString","createHash","update","digest","isBuffer","ArrayBuffer","isView","Uint8Array","buffer","byteOffset","byteLength","isInteger","AppTerminateContext","HookContext","triggerMetadata","isHttpTrigger","isTimerTrigger","fromRpcTypedData","addInputBindingName","level","args","format","fallbackLogHandler","response","HttpResponse","sendProxyResponse","rpcResponse","cookie","toRpcHttpCookie","enableContentNegotiation","bodyBytes","arrayBuffer","toRpcTypedData","nullableMapping","originalMapping","converted","keys","trace","debug","info","error","LogHookContext","init","category","_value","ReadOnlyError","invocationContext","fromRpcBinding","returnBinding","nonNullValue","hookData","metadata","triggerBinding","find","b","getArguments","request","context","InvocationContext","logHandler","fromRpcRetryContext","fromRpcTraceContext","fromRpcTriggerMetadata","fromRpcBindings","inputs","inputData","bindingName","rpcBinding","join","bindingType","proxyRequest","waitForProxyRequest","createStreamRequest","set","invokeFunction","getResponse","usedReturnValue","returnValue","outputValue","get","outputData","toRpcHttp","logCategory","state","badAsyncMsg","suffix","endsWith","getStringHash","registerHook","hookName","coreContext","AppStartContext","PreInvocationContext","PostInvocationContext","InvocationHookContext","inputCookie","rpcSameSite","toLocaleLowerCase","toRpcString","toNullableString","toNullableTimestamp","toNullableBool","toNullableDouble","uReq","undiciRequest","url","fromNullableMapping","nullableHeaders","nullableQuery","query","URLSearchParams","URL","searchParams","params","nullableParams","user","extractHttpUserFromHeaders","bodyUsed","blob","formData","text","clone","newInit","structuredClone","proxyReq","hostHeaderName","protoHeaderName","host","proto","lowerMethod","Query","rpcQueryIgnored","Headers","rpcHeaders","rpcParams","headersData","duplex","rpcValue","MySqlChangeOperation","SqlChangeOperation","fallbackString","InvocationContextExtraInputs","InvocationContextExtraOutputs","inputOrName","outputOrName","minutes","hours","milliseconds","clientPrincipal","claimsPrincipalData","id","username","identityProvider","functionCallback","functionHandler","undiciResponse","uResInit","jsonBody","propertyNameOrMessage","destination","typeName","test","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}